security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            cost: 13

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        db_provider:
            entity:
                class: App\Entity\Person

    role-hierarchy:
        ROLE_ADMIN: [ROLE_ALLOWED_TO_SWITCH]

    hide_user_not_found: false

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/(entrar|restablecer|publico)

        main:
            custom_authenticators:
                - App\Security\FormAuthenticator

            logout:
                path: logout
                target: /

            switch_user:
                role: ROLE_ALLOWED_TO_SWITCH
                parameter: _switch_user
            lazy: true

            user_checker: App\Security\UserChecker

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
